#average O(n) worst case O(n^2)
def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        #get k's index
        k = len(nums) - k
        def partition(nums, left, right):
            #get pivot
            m = randint(left,right)
            nums[m], nums[right] = nums[right], nums[m]
            pivot = nums[right]

            j = left
            for i in range(left, right):
                if nums[i] <= pivot:
                    nums[i], nums[j] = nums[j], nums[i]
                    j += 1
            nums[j],nums[right] = nums[right], nums[j]
            return j
        def quickSelect(nums, k, left, right):
            if left <= right:
                index = partition(nums, left, right)
                if index > k:
                    return quickSelect(nums, k, left, index-1)
                elif index < k:
                    return quickSelect(nums, k, index+1, right)
                else:
                    return nums[index]
        return quickSelect(nums, k, 0, len(nums)-1)

    